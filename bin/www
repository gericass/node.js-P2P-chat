#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodetest:server');
var http = require('http');



//var fs = require("fs");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app).listen(process.env.PORT || 8000,function(){
    console.log("Express server listening on port "+port);
});

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



/*var server = http.createServer(app).listen(process.env.PORT || '8000',function(){
    console.log("Express server listening on port 3000");
});*/



var io = require("socket.io").listen(server);


// ユーザ管理ハッシュ
var userHash = {};

var username = {};
var peerid = {};
var socketid = [];

// 2.イベントの定義
io.sockets.on("connection", function (socket) {

    // 接続開始カスタムイベント(接続元ユーザを保存し、他ユーザへ通知)
    socket.on("connected", function (name) {
        var msg = name + "が入室しました";
        userHash[socket.id] = name;
        io.sockets.emit("publish", {value: msg});
    });


    // メッセージ送信カスタムイベント
    socket.on("publish", function (data) {
        io.sockets.emit("publish", {name: data.value ,id: socket.id});
    });


    socket.on("save", function (data) {//モーダルウィンドウOK押下時
        username[socket.id] = data.name;
        peerid[socket.id] = data.peerid;
        socketid.push(socket.id);
        io.sockets.emit("publish", {name: data.name,id: socket.id});
    });

    socket.on("idconfirm",function(data){//peerid入力時
        if(data.pid==peerid[data.soc]){
            io.sockets.to(socket.id).emit("CON",{un:username[data.soc],pi:data.pid,me:username[socket.id],shitai:data.soc});
        }
    });

    socket.on("render",function(){//接続中ユーザー情報を送信
       io.sockets.to(socket.id).emit("render",{un:username,si:socketid})
    });



    // 接続終了組み込みイベント(接続元ユーザを削除し、他ユーザへ通知)
    socket.on("disconnect", function () {
        //if (username[socket.id]) {
            //var msg = username[socket.id] + "が退出しました";
            delete username[socket.id];
            delete peerid[socket.id];
            for(var i=0; i<socketid.length; i++){
                if(socketid[i] == socket.id){
                    socketid.splice(i, 1);
                }
            }
            //delete socketid[socket.id];
            io.sockets.emit("user-out",socket.id);
        //}
    });

});
